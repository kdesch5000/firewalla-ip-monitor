Firewalla IP Monitor - PostgreSQL Query Examples
===============================================

Database: PostgreSQL (firewalla_monitor)
Host: localhost:5432
User: firewalla_user

Tables and Key Columns:
- connections: Main connection data (ip, timestamp, direction, connection_type, internal_ip, internal_port, external_port, state, orig_packets, orig_bytes, reply_packets, reply_bytes, details, source_file)
- geolocations: IP geolocation cache (ip, country, country_code, region, city, latitude, longitude, timezone, isp, org, asn, hostname)
- threat_intel: Threat intelligence data (ip, virustotal_reputation, abuseipdb_confidence, threat_level, last_checked)

Basic Connection Queries
------------------------

1. Total connection count:
psql -d firewalla_monitor -c "SELECT COUNT(*) FROM connections;"

2. Top 10 external IPs by connection count:
psql -d firewalla_monitor -c "SELECT ip, COUNT(*) as connection_count FROM connections GROUP BY ip ORDER BY connection_count DESC LIMIT 10;"

3. Recent connections (last 24 hours):
psql -d firewalla_monitor -c "SELECT * FROM connections WHERE timestamp > NOW() - INTERVAL '1 day' ORDER BY timestamp DESC LIMIT 20;"

4. Connections by direction:
psql -d firewalla_monitor -c "SELECT direction, COUNT(*) FROM connections GROUP BY direction;"

Geolocation Analysis
--------------------

5. Connections by country (with geolocation join):
psql -d firewalla_monitor -c "SELECT g.country, COUNT(*) as connection_count FROM connections c LEFT JOIN geolocations g ON c.ip = g.ip GROUP BY g.country ORDER BY connection_count DESC LIMIT 15;"

6. Connections by city:
psql -d firewalla_monitor -c "SELECT g.city, g.country, COUNT(*) as connection_count FROM connections c LEFT JOIN geolocations g ON c.ip = g.ip WHERE g.city IS NOT NULL GROUP BY g.city, g.country ORDER BY connection_count DESC LIMIT 20;"

7. Show IP details with geolocation:
psql -d firewalla_monitor -c "SELECT c.ip, g.country, g.region, g.city, g.isp, COUNT(*) as connections FROM connections c LEFT JOIN geolocations g ON c.ip = g.ip GROUP BY c.ip, g.country, g.region, g.city, g.isp ORDER BY connections DESC LIMIT 10;"

Time-based Analysis
-------------------

8. Connections per hour over last 24 hours:
psql -d firewalla_monitor -c "SELECT EXTRACT(hour FROM timestamp) as hour, COUNT(*) as connections FROM connections WHERE timestamp > NOW() - INTERVAL '1 day' GROUP BY hour ORDER BY hour;"

9. Daily connection summary:
psql -d firewalla_monitor -c "SELECT DATE(timestamp) as date, COUNT(*) as total_connections, COUNT(DISTINCT ip) as unique_ips FROM connections WHERE DATE(timestamp) >= CURRENT_DATE - INTERVAL '7 days' GROUP BY date ORDER BY date;"

10. Busiest connection times:
psql -d firewalla_monitor -c "SELECT DATE_TRUNC('hour', timestamp) as hour_block, COUNT(*) as connections FROM connections GROUP BY hour_block ORDER BY connections DESC LIMIT 20;"

Advanced Filtering
------------------

11. Connections from specific countries:
psql -d firewalla_monitor -c "SELECT c.ip, c.timestamp, g.city FROM connections c LEFT JOIN geolocations g ON c.ip = g.ip WHERE g.country IN ('China', 'Russia') ORDER BY c.timestamp DESC LIMIT 50;"

12. Suspicious high-frequency IPs (>100 connections):
psql -d firewalla_monitor -c "SELECT ip, COUNT(*) as connection_count, MIN(timestamp) as first_seen, MAX(timestamp) as last_seen FROM connections GROUP BY ip HAVING COUNT(*) > 100 ORDER BY connection_count DESC;"

13. New IPs (first seen in last 24 hours):
psql -d firewalla_monitor -c "SELECT ip, MIN(timestamp) as first_seen, COUNT(*) as connection_count FROM connections WHERE timestamp > NOW() - INTERVAL '1 day' GROUP BY ip ORDER BY first_seen DESC;"

Threat Intelligence Analysis
----------------------------

14. Threat level breakdown:
psql -d firewalla_monitor -c "SELECT t.threat_level, COUNT(*) as count FROM connections c INNER JOIN threat_intel t ON c.ip = t.ip GROUP BY t.threat_level ORDER BY count DESC;"

15. Malicious/Suspicious IPs:
psql -d firewalla_monitor -c "SELECT c.ip, t.threat_level, t.virustotal_reputation, t.abuseipdb_confidence, COUNT(*) as connections FROM connections c INNER JOIN threat_intel t ON c.ip = t.ip WHERE t.threat_level IN ('malicious', 'suspicious') GROUP BY c.ip, t.threat_level, t.virustotal_reputation, t.abuseipdb_confidence ORDER BY connections DESC;"

16. Threat intel scanning status:
psql -d firewalla_monitor -c "
SELECT 
    COUNT(DISTINCT c.ip) as total_external_ips,
    COUNT(DISTINCT t.ip) as scanned_ips,
    COUNT(DISTINCT c.ip) - COUNT(DISTINCT t.ip) as pending_ips,
    ROUND((COUNT(DISTINCT t.ip)::decimal / COUNT(DISTINCT c.ip)) * 100, 1) as scan_progress
FROM connections c 
LEFT JOIN threat_intel t ON c.ip = t.ip 
WHERE c.ip != '0.0.0.0' 
AND c.ip::text NOT LIKE '192.168.%' 
AND c.ip::text NOT LIKE '10.%' 
AND c.ip::text NOT LIKE '172.%';"

Data Collection Source Analysis
-------------------------------

17. Connections by collection method (source_file field):
psql -d firewalla_monitor -c "SELECT source_file, COUNT(*) FROM connections WHERE source_file IS NOT NULL GROUP BY source_file;"

18. Connections with detailed JSON data:
psql -d firewalla_monitor -c "SELECT ip, timestamp, details FROM connections WHERE details IS NOT NULL AND details != '' ORDER BY timestamp DESC LIMIT 10;"

19. Connection states breakdown:
psql -d firewalla_monitor -c "SELECT state, COUNT(*) as count FROM connections WHERE state IS NOT NULL GROUP BY state ORDER BY count DESC;"

20. Internal IP analysis:
psql -d firewalla_monitor -c "SELECT internal_ip, COUNT(*) as connections FROM connections WHERE internal_ip IS NOT NULL GROUP BY internal_ip ORDER BY connections DESC LIMIT 10;"

Database Maintenance
--------------------

21. Database size and record counts:
psql -d firewalla_monitor -c "
SELECT 
    (SELECT COUNT(*) FROM connections) as total_connections,
    (SELECT COUNT(*) FROM geolocations) as cached_geolocations,
    (SELECT COUNT(*) FROM threat_intel) as threat_intel_records,
    (SELECT COUNT(DISTINCT ip) FROM connections) as unique_external_ips,
    pg_size_pretty(pg_database_size('firewalla_monitor')) as database_size;"

22. Oldest and newest records:
psql -d firewalla_monitor -c "
SELECT 
    (SELECT MIN(timestamp) FROM connections) as oldest_record,
    (SELECT MAX(timestamp) FROM connections) as newest_record;"

23. Table sizes:
psql -d firewalla_monitor -c "
SELECT 
    schemaname,
    tablename,
    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
FROM pg_tables 
WHERE schemaname = 'public' 
ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;"

Network Security Analysis
-------------------------

24. Top countries by connection volume:
psql -d firewalla_monitor -c "
SELECT 
    g.country,
    COUNT(*) as connections,
    COUNT(DISTINCT c.ip) as unique_ips,
    AVG(c.orig_bytes + c.reply_bytes) as avg_bytes
FROM connections c 
LEFT JOIN geolocations g ON c.ip = g.ip 
WHERE g.country IS NOT NULL 
GROUP BY g.country 
ORDER BY connections DESC 
LIMIT 20;"

25. Port analysis:
psql -d firewalla_monitor -c "
SELECT 
    external_port,
    COUNT(*) as connections,
    COUNT(DISTINCT ip) as unique_ips
FROM connections 
WHERE external_port IS NOT NULL 
GROUP BY external_port 
ORDER BY connections DESC 
LIMIT 20;"

Performance Tips
----------------

26. Query performance analysis:
EXPLAIN (ANALYZE, BUFFERS) SELECT * FROM connections WHERE timestamp > NOW() - INTERVAL '1 day';

27. Index usage statistics:
psql -d firewalla_monitor -c "
SELECT 
    schemaname, 
    tablename, 
    indexname, 
    idx_tup_read, 
    idx_tup_fetch 
FROM pg_stat_user_indexes 
WHERE schemaname = 'public' 
ORDER BY idx_tup_read + idx_tup_fetch DESC;"

Usage Tips:
-----------
- Use psql for interactive queries: psql -d firewalla_monitor
- Export to CSV: psql -d firewalla_monitor -c "COPY (query) TO STDOUT WITH CSV HEADER;" > output.csv
- Use EXPLAIN ANALYZE to analyze query performance for large datasets
- PostgreSQL uses INTERVAL syntax for time calculations (e.g., INTERVAL '1 day')
- Use DATE_TRUNC() for time-based grouping instead of strftime()
- INET data type provides efficient IP address storage and network operations

Connection Examples:
-------------------
# Connect to database
psql -h localhost -p 5432 -U firewalla_user -d firewalla_monitor

# Run query with nice formatting
psql -d firewalla_monitor -c "SELECT ip, COUNT(*) as connections FROM connections GROUP BY ip ORDER BY connections DESC LIMIT 5;" -x

# Export large result set
psql -d firewalla_monitor -c "COPY (SELECT * FROM connections WHERE timestamp > NOW() - INTERVAL '1 week') TO STDOUT WITH CSV HEADER;" > weekly_connections.csv